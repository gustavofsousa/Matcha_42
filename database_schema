CREATE TYPE e_gender AS ENUM ('Male', 'Female');
CREATE TYPE e_interests AS ENUM ('Literature', 'Music', 'Dance', 'Hiking', 'Karaoke', 'Religion', 'Climbing', 'Code', 'Animes');
CREATE TYPE e_orientation AS ENUM ('hetero', 'homo');

CREATE TABLE IF NOT EXISTS Users (
    id SERIAL PRIMARY KEY,
    firstName VARCHAR,
    lastName VARCHAR,
    username VARCHAR UNIQUE NOT NULL,
    email VARCHAR UNIQUE NOT NULL,
    age INT,
    gender e_gender,
    preference e_orientation,
    password_hash VARCHAR NOT NULL,
    email_verified BOOLEAN,
    profile INT REFERENCES Profile(id),
    created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE IF NOT EXISTS Profile (
    id SERIAL PRIMARY KEY,
    location VARCHAR,
    biography VARCHAR,
    interests e_interests,
    photos INT REFERENCES Photos(id),
    likes INT,
    blocks INT
);

CREATE TABLE IF NOT EXISTS EachOther (
    id SERIAL PRIMARY KEY,
    giver INT UNIQUE NOT NULL REFERENCES Profile(id),
    receiver INT UNIQUE NOT NULL REFERENCES Profile(id),
    created_at TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Photos (
    id SERIAL PRIMARY KEY,
    photo1 VARCHAR,
    photo2 VARCHAR,
    photo3 VARCHAR,
    photo4 VARCHAR,
    photo5 VARCHAR
);

CREATE TABLE IF NOT EXISTS Chats (
    id SERIAL PRIMARY KEY
);

CREATE TABLE IF NOT EXISTS Notifications (
    id SERIAL PRIMARY KEY
);

-- Atualização da tabela Profile para referenciar as tabelas EachOther e Likes
DO $$
BEGIN
    ALTER TABLE Profile ADD CONSTRAINT fk_likes FOREIGN KEY (likes) REFERENCES EachOther(id);
    ALTER TABLE Profile ADD CONSTRAINT fk_blocks FOREIGN KEY (blocks) REFERENCES EachOther(id);
EXCEPTION
    WHEN duplicate_column THEN
        -- ignora se a coluna já existir
END $$;
